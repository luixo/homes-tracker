import axios, { AxiosResponse } from "axios";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import React from "react";
import * as ReactQuery from "react-query";
import { getQueryKeyService, getQueryKeyServices } from "../client/queries";
import { ENTITIES_FETCH_AMOUNT, Service } from "../client/service";
import { styled } from "../client/styles";
import {
  DatabaseEntityElement,
  getEntitiesDatabase,
  sortEntities,
} from "../server/service-helpers";
import { globalLogger } from "../server/logger";

const Wrapper = styled("div", {
  padding: "0 1rem",
});

const Main = styled("main", {
  minHeight: "100vh",
  flex: 1,
  display: "flex",
  flexDirection: "column",
});

const Header = styled("h1");

type Props = {
  ids: string[];
  error?: string;
};

type GetKeysResponse = {
  keys: string[];
};

const Home: NextPage<Props> = (props) => {
  const queryResult = ReactQuery.useQuery(getQueryKeyServices(), async () => {
    const response: AxiosResponse<GetKeysResponse> = await axios(
      `/api/service-keys`
    );
    return response.data.keys;
  });
  return (
    <Wrapper>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <Header>Homes tracker</Header>
        {queryResult.status === "idle" || queryResult.status === "loading" ? (
          <div>Loading..</div>
        ) : queryResult.status === "error" ? (
          <div>Error</div>
        ) : null}
        {props.ids.map((id) => (
          <Service key={id} id={id} />
        ))}
        {props.error ? (
          <>
            <div>Error:</div>
            <div>{props.error}</div>
          </>
        ) : null}
      </Main>
    </Wrapper>
  );
};

export const getServerSideProps: GetServerSideProps<Props> = async () => {
  const logger = globalLogger.child({ handler: "index" });
  try {
    const db = await getEntitiesDatabase(logger);
    const queryClient = new ReactQuery.QueryClient({
      defaultOptions: {
        queries: {
          retry: 0,
        },
      },
    });
    queryClient.setQueryData(getQueryKeyServices(), Object.keys(db.services));
    Object.entries(db.services).forEach(([id, entities]) => {
      const slice = sortEntities(entities).slice(0, ENTITIES_FETCH_AMOUNT);
      const queryData: ReactQuery.InfiniteData<DatabaseEntityElement[]> = {
        pages: [slice],
        pageParams: [slice[slice.length - 1].timestamp],
      };
      queryClient.setQueryData(getQueryKeyService(id), queryData);
    });
    return {
      props: {
        ids: Object.keys(db.services),
        dehydratedState: ReactQuery.dehydrate(queryClient),
      },
    };
  } catch (e) {
    return {
      props: {
        ids: [],
        error: String(e),
      },
    };
  }
};

export default Home;
